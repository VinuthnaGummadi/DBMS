# ===============================
# = DATA SOURCE
# ===============================
spring.datasource.url = jdbc:postgresql://localhost:5432/shopping_mall
spring.datasource.username = postgres
spring.datasource.password = admin
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# ===============================
# = Thymeleaf configurations
# ===============================
spring.thymeleaf.mode=LEGACYHTML5
spring.thymeleaf.cache=false

# ==============================================================
# = Spring Security / Queries for AuthenticationManagerBuilder  
# ==============================================================
spring.queries.admin-query=select u.email, u.password, u.active from users u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=? and r.role_id=1
spring.queries.admin-roles-query=select u.email, r.role from users u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=? and r.role_id=1

spring.queries.shopOwner-query=select u.email, u.password, u.active from users u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=? and r.role_id=2
spring.queries.shopOwner-roles-query=select u.email, r.role from users u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=? and r.role_id=2

spring.queries.customer-query=select u.email, u.password, u.active from users u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=? and r.role_id=3
spring.queries.customer-roles-query=select u.email, r.role from users u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) where u.email=? and r.role_id=3

#spring.queries.user-query=select u.user_id,u.active,u.email,u.last_name,u.middle_name,u.first_name,u.password,u.mall_id, a.addressid,a.city,a.country,a.pin,a.state,a.street, p.phone_id,p.phone_no from users u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) inner join mall m on(u.mall_id=m.mall_id) inner join user_address a on(u.user_id=a.user_id) inner join user_phone p on(u.user_id=p.user_id) where u.email=? and r.role_id=?
spring.queries.user-query=select u.user_id,u.active,u.email,u.last_name,u.middle_name,u.first_name,u.password,u.mall_id from users u inner join user_role ur on(u.user_id=ur.user_id) inner join role r on(ur.role_id=r.role_id) inner join mall m on(u.mall_id=m.mall_id) where u.email=? and r.role_id=?

spring.queries.bids-delete=delete from bids where bid_id=? and user_id=?
spring.queries.bid-delete=delete from bid where bid_id=?

spring.queries.bids-add=insert into bids (user_id,bid_id) values(?,?)
spring.queries.bid-add=insert into bid (bid_id,authorized,end_date,start_date,shop_id,rent) values(?,?,?,?,?,?)
